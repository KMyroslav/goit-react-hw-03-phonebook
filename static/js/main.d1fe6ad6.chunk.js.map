{"version":3,"sources":["components/Filter/Filter.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["Filter","filter","handleFilter","filterInputId","shortid","generate","htmlFor","id","type","name","value","pattern","title","onChange","ContactForm","state","number","handleChange","e","setState","currentTarget","handleSubmit","preventDefault","props","addContact","nameInputId","numberInputId","onSubmit","this","required","Component","ContactList","contacts","handleDelete","obj","toLowerCase","includes","map","onClick","App","find","contact","alert","prevState","contactId","reduce","acc","el","push","parsedContacts","JSON","parse","localStorage","getItem","prevProps","console","log","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d1fe6ad6.chunk.js","sourcesContent":["import shortid from \"shortid\";\nimport propTypes from \"prop-types\";\n\nfunction Filter({ filter, handleFilter }) {\n  const filterInputId = shortid.generate();\n\n  return (\n    <div>\n      <label htmlFor={filterInputId}>Find contacts by name</label>\n      <input\n        id={filterInputId}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Casnumbermore d'Artagnan и т. п.\"\n        onChange={handleFilter}\n      />\n    </div>\n  );\n}\n\nFilter.propTypes = {\n  filter: propTypes.string,\n  handleFilter: propTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { Component } from \"react\";\nimport shortid from \"shortid\";\nimport propTypes from \"prop-types\";\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleChange = (e) => {\n    this.setState({ [e.currentTarget.name]: e.currentTarget.value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.addContact(this.state.name, this.state.number);\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  nameInputId = shortid.generate();\n  numberInputId = shortid.generate();\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label htmlFor={this.nameInputId}>Name</label>\n        <input\n          id={this.nameInputId}\n          type=\"text\"\n          name=\"name\"\n          value={this.state.name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Casnumbermore d'Artagnan и т. п.\"\n          required\n          onChange={this.handleChange}\n        />\n        <label htmlFor={this.numberInputId}>Number</label>\n        <input\n          id={this.numberInputId}\n          type=\"tel\"\n          name=\"number\"\n          value={this.state.number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={this.handleChange}\n        />\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  addContact: propTypes.func.isRequired,\n};\n\nexport default ContactForm;\n","import propTypes from \"prop-types\";\n\nfunction ContactList({ contacts, filter, handleDelete }) {\n  return (\n    <div>\n      {contacts\n        .filter((obj) => obj.name.toLowerCase().includes(filter.toLowerCase()))\n        .map((e) => (\n          <p key={e.id}>\n            {e.name}: {e.number}\n            <button\n              type=\"button\"\n              data-id={e.id}\n              onClick={() => {\n                handleDelete(e.id);\n              }}\n            >\n              Delete\n            </button>\n          </p>\n        ))}\n    </div>\n  );\n}\n\nContactList.propTypes = {\n  contacts: propTypes.array.isRequired,\n  filter: propTypes.string.isRequired,\n  handleDelete: propTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import { Component } from \"react\";\nimport shortid from \"shortid\";\nimport Filter from \"./components/Filter/Filter\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\n\nclass App extends Component {\n  state = {\n    contacts: [\n      // { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n      // { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n      // { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n      // { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    const parsedContacts = JSON.parse(localStorage.getItem(\"contacts\"));\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log(this.state.contacts, prevState.contacts);\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  addContact = (name, number) => {\n    if (this.state.contacts.find((contact) => contact.name === name)) {\n      alert(`${name} is alrteady in contacts.`);\n      return;\n    }\n    this.setState((prevState) => {\n      return {\n        contacts: [\n          ...prevState.contacts,\n          {\n            id: shortid.generate(),\n            name: name,\n            number: number,\n          },\n        ],\n      };\n    });\n  };\n\n  handleDelete = (contactId) => {\n    this.setState({\n      contacts: this.state.contacts.reduce((acc, el) => {\n        if (el.id !== contactId) {\n          acc.push(el);\n        }\n        return acc;\n      }, []),\n    });\n  };\n\n  handleFilter = (e) => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm addContact={this.addContact} />\n        <h2>Contacts</h2>\n        <Filter filter={this.state.filter} handleFilter={this.handleFilter} />\n        <ContactList\n          contacts={this.state.contacts}\n          filter={this.state.filter}\n          handleDelete={this.handleDelete}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}